name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 14.x
  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile
  #     - name: Test
  #       run: yarn test

  release:
    name: Release
    runs-on: ubuntu-latest
    # needs: test
    if: github.ref == 'refs/heads/master'
    environment: Release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetch Git history so that Changesets can generate changelogs with correct commits
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Bump versions according to changeset
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          yarn changeset version
          git push
      - name: Publish to npm
        id: publish
        run: |
          echo '//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}' > .npmrc
          yarn release
          echo "::set-output name=version_tag::$(git describe --tags --abbrev=0)"
          release_changelog=$(node -e '
            const changelog = require("fs").readFileSync("CHANGELOG.md", "utf8");
            const { version } = require("./package.json");
            console.log(require("@changesets/release-utils").getChangelogEntry(changelog, version).content);
          ')
          release_changelog="${release_changelog//%/'%25'}"
          release_changelog="${release_changelog//$'\n'/'%0A'}"
          release_changelog="${release_changelog//$'\r'/'%0D'}"
          echo "::set-output name=release_changelog::$release_changelog"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.publish.outputs.version_tag }}
          release_name: ${{ steps.publish.outputs.version_tag }}
          body: ${{ steps.publish.outputs.release_changelog }}

  build:
    strategy:
      matrix:
        arch: [x64]
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14]
        include:
          - os: ubuntu-latest
            os-display-name: Linux
            os-pkg-name: linux
          - os: windows-latest
            os-display-name: Windows
            os-pkg-name: win
          - os: macos-latest
            os-display-name: macOS
            os-pkg-name: macos

    name: Build binary for ${{ matrix.os-display-name }}
    needs:
      #   - test
      - release
    if: github.ref == 'refs/heads/master'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build JavaScript
        run: yarn build
      - name: Build binary
        id: build
        run: |
          pkg_arch="node${{ matrix.node-version }}-${{ matrix.os-pkg-name }}-${{ matrix.arch }}"
          pkg_out="./dist-bin/aoc-${{ matrix.os-pkg-name }}-${{ matrix.arch }}"
          yarn pkg -c package.json -t "$pkg_arch" -o "$pkg_out" ./dist/bin.js
          echo "::set-output name=bin_file::$(ls -1 ./dist-bin/ | head -n1)"
      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.publish.outputs.upload_url }}
          asset_path: ./dist-bin/${{ steps.build.outputs.bin_file }}
          asset_name: ${{ steps.build.outputs.bin_file }}
          asset_content_type: application/octet-stream
